#===============================================================================

server:
  port: ${CONFIG_PORT:9020}
  servlet:
    context-path: /${CONFIG_CONTEXT_PATH:cloud-config-server}

#===============================================================================
#========================= > COMMON PROPERTIES

application:
  name-key: config
  version: v#project.version#
  java.version: #java.build.version#
  verbose.enabled: false

#===============================================================================
#========================= > LOGGER CONFIG

logging.config: classpath:logback-spring.xml

#===============================================================================
#========================= > SPRING & BITBUCKET CONF

#   2 maniere pour se connecter a bitbucket 
#   par login / password (il faut crÃ©er un AppPassword dans bitbucket)
#   Generate une ssh key (rsa) utiliser comme dessous

spring:
  profiles:
    active: local
  application:
    name: ${application.name-key}-server
  banner:
    location: classpath:/boot/banner.txt
  cloud:
    config:
      server:
        git:
          refresh-rate: 10
          uri: ${GIT_URI:https://bitbucket.org/station2023/solar-renter-car}
          cloneOnStart: true
          searchPaths: 'configuration-repo/{application},configuration-repo/common' # search in sub directories
          default-label: ${DEFAULT_BRANCH:develop}
          #ignoreLocalSshSettings: true
          username: ${GIT_USERNAME:mfichtali}
          password: ${GIT_PASSWORD:ATBBrKERNfV2dBHYtHMEV5xPaDVeA5C5056C}
#          privateKey: |
#                        -----BEGIN RSA PRIVATE KEY-----
#                        Proc-Type: 4,ENCRYPTED
#                        DEK-Info: DES-EDE3-CBC,C76155ABC42296A5
#                        
#                        mawCoGhdssf7PH1B813A4zBgQAQR8GEmpEWx4fkVeXLOZrysBLqmaLMdhmoNTK7x
#                        OyyhedrrFDIYzIr70/Mju84mqcBVA0ZajFuDk5Ce3n3STomPk6jy97Lw801BiQMK
#                        tXuf23GWGqacBu5O9hrHDAnOihryh5CRbQXFeLrrHnzocUQs4SEOefRFIz0ldAeM
#                        L3BSM/OerkIQTOC4g7RLkcAjl9HgVx8Ysjx0LNXgtkNdHSM8HXblzzc0E2Y5N7Kd
#                        13PIjj+2Icd8wLkmcbE8XWe4gZZTT4S1iWpCZ3H1oTcmkwT77dmfvztfnuiTJbEl
#                        f4+dWFh59bVp7hXTl32Fr2hoRh2RhE5ZIr1pkA+RtQ1py74CYnituAOAEE4mtI0A
#                        oubr541nQzKR1fW8K7iLhCWOEHv74uHcF5cetWmoF7SDeBe+z2VJZfjLd0KhMSGR
#                        UVzBvcQNS618pE8IYiCljIPD14GGUQkYxa5Jr78QisySBHxBNW89fnkWV0R3WEor
#                        3LAXM59goq8mZVArIJjqTftmzd7QGlCQPlx+G29WW6XjqSgvKje77chHp6Lj0o52
#                        Rq9PlvHPl7+5edpO1C9r8DZGbfXIqpnTQCyfdEfY0iz1LQvX5U6ySPMZ3oNq439C
#                        KdFgLMEUleRjM6tSch6NfvRaK1qpfWJ74ROAb+KhF7swP0/f0B+0VMkEDF65kXmd
#                        LIcsNuGXdnn1mgRQOAJl3JGWhUFbPUrApfxsjRtRsPA2Zh1ZdrI+YI0/HW98LpRq
#                        eDof0O1A2XtShcJhXcXEAltkRpAS6SeewypaJ0yDDpFzUIbysHnqTmS2MC6b2Ld0
#                        pa5k5n0ARA9606nX7t7hBODRGkjmOYlqcBQIhjdYiEQUR2fSfZ9v9r3S2YTYdbvM
#                        gLQaGR9N7am+i6VFeocdu4lxiZUxUcOmkMXYLqtoSsIPXUYEcXTZArY8P/jF+hov
#                        AKuCDQbXCYaObswrjvYAGJbStJ2fSD7X69bN/3zfSAKsAIfHkBxyo4VmSk5R0RZV
#                        UafHtOnkT0sRDKoWyXiyCXvkMDZHhfxTd5BR9f0ZSvfCNuTmsJZDRZPSd0MfhyGy
#                        aAexzTlCz9NJN9awoEBsPa8RNArdKftJeT3X6WrdBSD2dQQkPzYfN5EuoLmYjNU2
#                        0a2W1rBqSP2IUGEU3vlUVNtaU/dijHHWuTT/oApahOOERB3zcqaLyP1hzRoY3nPt
#                        mc7cCIUzXWUGaxmJjIvUapBhs4W76cDjK26/RgpA/lAQG2ohkPh/EaPmQk/doldJ
#                        R1hUakAT2L3mz+k441HKA1aYFeDnuNXMq0gsJn4iL/Y1GwCkAyoBLuvEwMyQBxT8
#                        8/Mb6JSYaeOTs/ChwbpljwFb6cFgbttmK60SnMqaFqfQslUEccE+o79wcikxSBOR
#                        GifNeQKFkgSJR9URgyEVbEZO5bdajST9BTdNGMSgMWiqEDiWaAoOk56XL0Wv1Nfw
#                        IuW/mmaO/BKV2BlkjE032RaZ2nZOfa49CWNAPtvjZc3tmuuOfE5iwnvjPJe0Zo73
#                        10Nd12RQh7bMC7PUXX8n/2bny7pHkS+8ie25M2LCblxd83aha7WEjg==
#                        -----END RSA PRIVATE KEY-----
          
#===============================================================================
#========================= > SPRING EURAKA SERVICE

eureka:
  instance:
    instance-id: ${spring.application.name}:${random.value}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://${REGISTRY_SERVICE_NAME:localhost}:${REGISTRY_PORT:9010}/${REGISTRY_CONTEXT_PATH:registry-service}/eureka

#===============================================================================

management:
  endpoints:
    web:
      exposure:
        include: refresh