services:


  # Begin Zipkin section
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: $ZIPKIN_SERVICE
    ports:
      - $ZIPKIN_PORT:$ZIPKIN_DEFAULT_PORT
  # End Zipkin section


  # Begin zookeeper section
  # https://hub.docker.com/r/confluentinc/cp-zookeeper/tags
  zookeeper:
    image: confluentinc/cp-zookeeper:$ZOOKEEPER_IMAGE_VERSION
    # add user property as root
    user: root
    container_name: $ZOOKEEPER_SERVICE_NAME
    environment:
      ZOOKEEPER_CLIENT_PORT: $ZOOKEEPER_DEFAULT_PORT
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - $APP_ZOOKEEPER_VOLUME/data:/var/lib/zookeeper/data
      - $APP_ZOOKEEPER_VOLUME/log:/var/lib/zookeeper/log
    ports:
      - $ZOOKEEPER_DEFAULT_PORT:$ZOOKEEPER_DEFAULT_PORT
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost $ZOOKEEPER_DEFAULT_PORT"]
      interval: 10s
      timeout: 5s
      retries: 3
  # End zookeeper section


  # Begin kafka section
  # https://hub.docker.com/r/confluentinc/cp-kafka/tags
  kafka:
    image: confluentinc/cp-kafka:$KAFKA_IMAGE_VERSION
    # add user property as root
    user: root
    container_name: $KAFKA_SERVICE_NAME
    depends_on:
      - $ZOOKEEPER_SERVICE_NAME
    ports:
      - $KAFKA_DEFAULT_PORT:$KAFKA_DEFAULT_PORT
    volumes:
      - $APP_KAFKA_VOLUME/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:$ZOOKEEPER_DEFAULT_PORT
      # KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://$KAFKA_SERVICE_NAME:$EXP_KAFKA_PORT,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-localhost}:$KAFKA_DEFAULT_PORT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092

      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT

      # KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:$KAFKA_DEFAULT_PORT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  # End kafka section


  # Begin Portainer docker section
  # https://hub.docker.com/r/portainer/portainer-ce
  portainer:
    image: portainer/portainer-ce:$PORTAINER_VERSION
    container_name: $PORTAINER_SERVICE
    volumes:
      - $APP_PORTAINER_VOLUME/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    ports:
      - $PORTAINER_PORT:$PORTAINER_DEFAULT_PORT
  # End Portainer docker section


  # Begin Prometheus section
#  prometheus:
#    image: prom/prometheus:$PROMETHEUS_VERSION
#    container_name: prometheus
#    restart: unless-stopped
#    volumes:
#      - $APP_PROMETHEUS_VOLUME/config:/etc/prometheus/
#      - ../../monitoring/:/etc/prometheus/
#    command:
#      - "--config.file=/etc/prometheus/prometheus.yaml"
#    ports:
#      - $PROMETHEUS_PORT:$PROMETHEUS_DEFAULT_PORT
  # End Prometheus section


  # Begin grafana section
#  grafana:
#    image: grafana/grafana-oss:$GRAFANA_VERSION
#    container_name: $GRAFANA_SERVICE_NAME
#    pull_policy: always
#    restart: unless-stopped
#    user: root
#    volumes:
#      - $APP_GRAFANA_VOLUME:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#      - GF_USERS_ALLOW_SIGN_UP=false
#      - GF_SERVER_DOMAIN=localhost
#      # Enabled for logging
#      - GF_LOG_MODE=console file
#      - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug
#    ports:
#      - $GRAFANA_PORT:$GRAFANA_DEFAULT_PORT
  # End grafana section


  # Begin kafka-ui section
  # https://hub.docker.com/r/provectuslabs/kafka-ui/tags
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:$KAFKAUI_IMAGE_VERSION
  #   container_name: $KAFKAUI_SERVICE_NAME
  #   depends_on:
  #     - kafka
  #   ports:
  #     - $EXP_KAFKAUI_PORT:$KAFKAUI_DEFAULT_PORT
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:$KAFKA_DEFAULT_PORT
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:$EXP_ZOOKEEPER_PORT
  # End kafka-ui section


networks:
  default:
      name: netix-red
      external: true

########## Restrat Policy ##########
# no: Containers won't restart automatically.
# on-failure[:max-retries]: Restart the container if it exits with a non-zero exit code, and provide a maximum number of attempts for the Docker daemon to restart the container.
# always: Always restart the container if it stops.
# unless-stopped: Always restart the container unless it was stopped arbitrarily, or by the Docker daemon.
  
  # Nexus conf
  # nexus:
  #   image: sonatype/nexus3
  #   container_name: $NEXUS_SERVICE
  #   restart: always
  #   volumes:
  #     - ${LOCAL_VOLUME_NEXUS}:/nexus-data
  #   ports:
  #     - $NEXUS_PORT:$NEXUS_DEFAULT_PORT
  

  # RabbitMQ conf
  # rabbitmq:
  #   hostname: 'host-rabbitmq'
  #   image: rabbitmq:3-management-alpine
  #   container_name: $RABBITMQ_SERVICE
  #   volumes:
  #       - $LOCAL_VOLUME_RABBITMQ\$SPRING_PROFILES_ACTIVE\data\:/var/lib/rabbitmq/
  #       - $LOCAL_VOLUME_RABBITMQ\$SPRING_PROFILES_ACTIVE\log\:/var/log/rabbitmq/
  #   ports:
  #     - $RABBITMQ_PORT:$RABBITMQ_DEFAULT_PORT
  #     - $RABBITMQ_PORT_MANAGMNT:$RABBITMQ_MANAGMNT_DEFAULT_PORT


  # Postgres conf 
  # postgres_db_fake:
  #   image: postgres:14.2-alpine
  #   container_name: postgres_db_fake
  #   volumes:
  #     - $LOCAL_VOLUME_POSTGRES\fake:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=$POSTGRES_DB_FAKE
  #     - POSTGRES_USER=$POSTGRES_USER_FAKE
  #     - POSTGRES_PASSWORD=$POSTGRES_PASSWORD_FAKE
  #   ports:
  #     - $FAKE_POSTGRES_PORT:$POSTGRES_DEFAULT_PORT


  # Begin kafka & zookeeper section
  # kafka:
  #   image: obsidiandynamics/kafka
  #   restart: "no"
  #   container_name: $KAFKA_SERVICE_NAME
  #   ports:
  #     - $EXP_ZOOKEEPER_PORT:$EXP_ZOOKEEPER_PORT
  #     - $EXP_KAFKA_PORT:$EXP_KAFKA_PORT
  #   volumes:
  #     - $APP_KAFKA_VOLUME/data:/var/lib/kafka
  #   environment:
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
  #     KAFKA_LISTENERS: "INTERNAL://:$KAFKA_DEFAULT_PORT,EXTERNAL://:$EXP_KAFKA_PORT"
  #     KAFKA_ADVERTISED_LISTENERS: "INTERNAL://$KAFKA_SERVICE_NAME:$KAFKA_DEFAULT_PORT,EXTERNAL://localhost:$EXP_KAFKA_PORT"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  #     KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
  #     KAFKA_RESTART_ATTEMPTS: "10"
  #     KAFKA_RESTART_DELAY: "5"
  #     ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
  # End kafka & zookeeper section 